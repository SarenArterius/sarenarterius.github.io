/** @type {Array} */var _0x8323 = ["hasOwnProperty", "push", "random", "length", "floor", "Zoran66", "Jovanjoc", "Nenad", "Stefan", "Doge", "Kingofall", "Zeljko99", "ajmo tim", "Serbia", "Serbian Empire", "Zmaj", "SRBIJA", "byzantium", "Kuipersyea", "Tijink", "girl", "Earth", "THEnoltus", "Stotering", "adam", "Enter", "greatball", "fuck you", "gamerforlife", "Wormeesterking", "Turner", "MStephens", "canadabest", "godofgaming", "mimi", "CANADA", "Sad Soul", "fuck greece", "LOVE KAROL", "Obama banana", "need a bro", "DaBomb", "Rag", "No\u00e9 Bescond", "Dimont", "Fran\u00e7ois333", "666", "sir", "pokerface", "mark", "Richard Barrande", "KING", "franclord", "ROI-ROI", "hitler", "goodball", "Nottebohm", "Jakob Schuttler", "mistress", "Axel Sch\u00f6ler", "rambo", "german best", "Giuseppe", "parrot", "sexyjohn", "Nazi", "vampire", " JDaan", "lucas2000", "Dalton", "Rubengamer", "Paige", ":D", "sanik", "8CH", "Real Madrid", "Shy Guy", "NL", "Mark Rutte", "MrLions", "wayne_kenoff", "Jerry", "Marcos", "Horace", "Mary", "Merrill", "Orval", "Noel", "Edmund", "USA", "obama", "Bait", "9gag", "2ch.hk", "4chan", "ayy lmao", "Picollo", "CIA", "tumblr", "Sir", "wojak", "Pewdiepie", "Stussy", "Vinesauce", "I play alone", "NASA", "stvarno radi,hvala ti punooo", "nek sam i ja nesto dobio kako treba", "kako ste vi presli ovo??", "radi za mene hvala", "worked for me thank you", "gonna killed them now", "Provjerio i mogu reci da radi,hvala puno :)", "Do kad ce ovaj hack da traje?", "Thank you,I am now going to use this more ofthen!!!", "so that is what top playets are using...", "i dont know help me how to use this?? email me annypink2004@gmail.com plz mail", "LOL can't believe it this is for real", "xp boost hack dont work but maybe its just me rated 9/10 other options are fine", "10/10", "hate the confirmation thing but at least I can use hack at the end", "I use this hack for a week already. I am allways #1", "love the hack because it is so simple just really good", "it really works,recommend it to everyone!", "very simple hack i love it", "you should try this hack,simple amazing!!", "second time using it and works,but all the time need to verify why? fix that", "Took 2 offers for me but was worth it :)", "How to bypass verfication so next time I don't have to use it? email me at lovedancelive@gmail.com", "I dont know how,but it worked... Honestly guys,recommending", "works tnx you guys!", "I doing programming myself and I want to know how do you do this guys? exploit function or something else?", "yesterday worked for my phone but today only works on my deskop", "very fast,no confirmation for me this time vetter then before thanks <3", "I combine this with clash royale bot but still I kep coming back to dis site.", "good I will use it in future", "I get option to post comments only after I did offer for 2 times,I though it doesn't work,but it really does lol", "lol to bad everytime I delete history and cache I have to use it again", "to bad there is survey at the end... probably developers don't have money to eat but have to make this hack xD", "gonna play with my friend now gonna eat him :D :D", "Anybody want to play with me now? ;)", "worked", "really works for me", "7/10 - Don't like the survey thing", "great features", "Reaching #1 is easy as fuck now lol", "does this work for mobiles also?", "what the fuck is wrong with surveys took 2 times to do it loooool fuck this shit ", "my nick name is always USAkiller", "How do you do it guys? for real?", "HONEST REVIEW: I don't like there is a survey, but after all it's functioning great now!", "9/10 very happy with it", "AMAZIIIIIIIIIING", "kjkldsjsdklsdkdsk", "I am from belgium and these really works", "great tool recommend it", "good tool to use when you are bored", "clashroyale hack worked for me", "This is the best XD", "10/10 \u0414\u043e\u0431\u0440\u043e", "Im satisfied with this ", "Thank you again :) ", "my username greencanadaYX if you see it that is me", "tnx", "When I saw video proof I honestly didn't think it was possible but it really works amazed with it", "guys just watch video tutorial if you don't know how to use this tool", "how to add this feature to my mobile so I don't have to use it again?", "just do it ;)", "CANADAAAAA IS BEEEEST", "asked me to confirm it 2 times LOL I am no robot loool", "Tout fonctionne bien ,je vais pouvoir \u00eatre premier!", "Merci <3", "g\u00e9nial pirater  9/10", "i like this tool lot helped me to be #1 merci :) :)", "does work for me", "je t'aime!!!!", "Will there be bots too?", "france rules so as this hack funny how there are some haters", "ich liebe es", "who is player hitler??", "Europe is best I played USA but it lags so muuuch", "germany forever!!!", "danke", "10/10 danke!", "when will you make hack for boom beach game", "I don't need this hack to be #1 and anybody who is using it are fools", "dankjewel", "waarom? moon", "email me if you want to play with me amygold222@gmail.com ", "werkt voor mij", "amazed with it", "groot ;)", "What are  600 people doing on this website cheaters!!!!", "How to use this should I just play now or what?", "People don't know how to use english and try to do survey? lol just choose one where you need to send message from phone its easier", ":D", "Bra,Jag talar inte engelska", "Thanks for whover made this", "10/10 fantastiske", "Belgium", "Canada", "France", "Germany", "Netherlands", "United-Kingdom", "United-States-of-America", "animated zoomIn", "addClass", ".body-user", "removeClass", "animated zoomOut", "Name", "Comment", "Flag", "text", ".userName", ".userComment", "src", "img/flags/", ".png", "prop", ".flags", "protocol", "location", "//", "hostname", "www.", "test", "", "replace", "enc", "\x3c!--", "write", "onload", "eef86fb8779eac494e0332efa691a5a776fe8bd097be4ec3e0b75edc84581d69", "lib", "Base", "prototype", "mixIn", "init", "apply", "$super", "extend", "toString", "WordArray", "words", "sigBytes", "stringify", "clamp", "ceil", "call", "clone", "slice", "Hex", "join", "substr", "Latin1", "fromCharCode", "charCodeAt", "Utf8", "Malformed UTF-8 data", "parse", "BufferedBlockAlgorithm", "_data", "_nDataBytes", "string", "concat", "blockSize", "_minBufferSize", "max", "min", "splice", "Hasher", "cfg", "reset", "finalize", "HMAC", "algo", "sqrt", "pow", "SHA256", "_hash", "HmacSHA256"];/** * @return {undefined} */function createComments() {  /**   * @param {?} regex   * @return {?}   */  function _processPattern(regex) {    var resp;    /** @type {Array} */    var collection = [];    for (resp in regex) {      if (regex[_0x8323[0]](resp)) {        collection[_0x8323[1]](resp);      }    }    return regex[collection[Math[_0x8323[4]](Math[_0x8323[2]]() * collection[_0x8323[3]])]];  }  /** @type {Array} */  var data = [_0x8323[5], _0x8323[6], _0x8323[7], _0x8323[8], _0x8323[9], _0x8323[10], _0x8323[11], _0x8323[12], _0x8323[13], _0x8323[14], _0x8323[15], _0x8323[16], _0x8323[17]];  /** @type {Array} */  var specsList = [_0x8323[18], _0x8323[19], _0x8323[20], _0x8323[21], _0x8323[22], _0x8323[23], _0x8323[24], _0x8323[25], _0x8323[26], _0x8323[27], _0x8323[28], _0x8323[29]];  /** @type {Array} */  var segmentMatch = [_0x8323[30], _0x8323[31], _0x8323[32], _0x8323[33], _0x8323[34], _0x8323[35], _0x8323[36], _0x8323[37], _0x8323[38], _0x8323[39], _0x8323[40], _0x8323[41]];  /** @type {Array} */  var dirs = [_0x8323[42], _0x8323[43], _0x8323[44], _0x8323[45], _0x8323[46], _0x8323[47], _0x8323[48], _0x8323[49], _0x8323[50], _0x8323[51], _0x8323[52], _0x8323[53]];  /** @type {Array} */  var segs = [_0x8323[54], _0x8323[55], _0x8323[56], _0x8323[57], _0x8323[58], _0x8323[59], _0x8323[60], _0x8323[61], _0x8323[62], _0x8323[63], _0x8323[64], _0x8323[65], _0x8323[66]];  /** @type {Array} */  var def = [_0x8323[67], _0x8323[68], _0x8323[69], _0x8323[70], _0x8323[71], _0x8323[72], _0x8323[73], _0x8323[74], _0x8323[75], _0x8323[76], _0x8323[77], _0x8323[78]];  /** @type {Array} */  var parts = [_0x8323[79], _0x8323[80], _0x8323[69], _0x8323[81], _0x8323[82], _0x8323[83], _0x8323[84], _0x8323[85], _0x8323[62], _0x8323[86], _0x8323[87], _0x8323[88], _0x8323[89], _0x8323[90], _0x8323[91], _0x8323[92], _0x8323[93], _0x8323[94], _0x8323[95], _0x8323[96], _0x8323[97], _0x8323[98], _0x8323[99], _0x8323[100], _0x8323[101], _0x8323[102], _0x8323[103], _0x8323[104], _0x8323[105]];  /** @type {Array} */  var vals = [_0x8323[106], _0x8323[107], _0x8323[108], _0x8323[109], _0x8323[110], _0x8323[111], _0x8323[112], _0x8323[113]];  /** @type {Array} */  var $cookies = [_0x8323[114], _0x8323[115], _0x8323[116], _0x8323[117], _0x8323[118], _0x8323[119], _0x8323[120], _0x8323[121], _0x8323[122], _0x8323[123], _0x8323[124], _0x8323[125], _0x8323[126], _0x8323[127], _0x8323[128], _0x8323[129], _0x8323[130], _0x8323[131], _0x8323[132], _0x8323[133], _0x8323[134], _0x8323[135], _0x8323[136], _0x8323[137], _0x8323[138], _0x8323[139], _0x8323[140], _0x8323[141], _0x8323[142], _0x8323[143], _0x8323[144], _0x8323[145], _0x8323[146], _0x8323[147], _0x8323[148],   _0x8323[149], _0x8323[150], _0x8323[151], _0x8323[152], _0x8323[153]];  /** @type {Array} */  var owner = [_0x8323[154], _0x8323[155], _0x8323[156], _0x8323[157], _0x8323[158], _0x8323[159], _0x8323[160], _0x8323[161]];  /** @type {Array} */  var ctx = [_0x8323[162], _0x8323[163], _0x8323[164], _0x8323[165], _0x8323[166], _0x8323[167], _0x8323[168], _0x8323[169]];  /** @type {Array} */  var ca = [_0x8323[170], _0x8323[171], _0x8323[172], _0x8323[173], _0x8323[174], _0x8323[175], _0x8323[176], _0x8323[177]];  /** @type {Array} */  var args = [_0x8323[178], _0x8323[179], _0x8323[180], _0x8323[181], _0x8323[182], _0x8323[183], _0x8323[184], _0x8323[185]];  /** @type {Array} */  var params = [_0x8323[186], _0x8323[187], _0x8323[188], _0x8323[189], _0x8323[190], _0x8323[191], _0x8323[192], _0x8323[193]];  /** @type {Array} */  var resultItems = [_0x8323[194], _0x8323[195], _0x8323[116], _0x8323[196], _0x8323[197], _0x8323[198], _0x8323[120], _0x8323[121]];  var Name = data[Math[_0x8323[4]](Math[_0x8323[2]]() * data[_0x8323[3]])];  var part = parts[Math[_0x8323[4]](Math[_0x8323[2]]() * parts[_0x8323[3]])];  var filename = specsList[Math[_0x8323[4]](Math[_0x8323[2]]() * specsList[_0x8323[3]])];  var key = segmentMatch[Math[_0x8323[4]](Math[_0x8323[2]]() * segmentMatch[_0x8323[3]])];  var dir = dirs[Math[_0x8323[4]](Math[_0x8323[2]]() * dirs[_0x8323[3]])];  var seg = segs[Math[_0x8323[4]](Math[_0x8323[2]]() * segs[_0x8323[3]])];  var name = def[Math[_0x8323[4]](Math[_0x8323[2]]() * def[_0x8323[3]])];  var item = def[Math[_0x8323[4]](Math[_0x8323[2]]() * def[_0x8323[3]])];  part = parts[Math[_0x8323[4]](Math[_0x8323[2]]() * parts[_0x8323[3]])];  var val = vals[Math[_0x8323[4]](Math[_0x8323[2]]() * vals[_0x8323[3]])];  var unlock = owner[Math[_0x8323[4]](Math[_0x8323[2]]() * owner[_0x8323[3]])];  var cx = ctx[Math[_0x8323[4]](Math[_0x8323[2]]() * ctx[_0x8323[3]])];  var c = ca[Math[_0x8323[4]](Math[_0x8323[2]]() * ca[_0x8323[3]])];  var pageY = args[Math[_0x8323[4]](Math[_0x8323[2]]() * args[_0x8323[3]])];  var param = params[Math[_0x8323[4]](Math[_0x8323[2]]() * params[_0x8323[3]])];  var result = resultItems[Math[_0x8323[4]](Math[_0x8323[2]]() * resultItems[_0x8323[3]])];  var value = $cookies[Math[_0x8323[4]](Math[_0x8323[2]]() * $cookies[_0x8323[3]])];  var r20 = {    Serbia : {      Name : Name,      Flag : _0x8323[13],      Comment : val    },    Belgium : {      Name : filename,      Flag : _0x8323[199],      Comment : unlock    },    Canada : {      Name : key,      Flag : _0x8323[200],      Comment : cx    },    France : {      Name : dir,      Flag : _0x8323[201],      Comment : c    },    Germany : {      Name : seg,      Flag : _0x8323[202],      Comment : pageY    },    Netherlands : {      Name : name,      Flag : _0x8323[203],      Comment : param    },    UnitedKingdom : {      Name : item,      Flag : _0x8323[204],      Comment : result    },    USA : {      Name : part,      Flag : _0x8323[205],      Comment : value    }  };  var re = _processPattern(r20);  $(_0x8323[208])[_0x8323[207]](_0x8323[206]);  setTimeout(function() {    $(_0x8323[208])[_0x8323[209]](_0x8323[206]);    $(_0x8323[208])[_0x8323[207]](_0x8323[210]);  }, 5400);  setTimeout(function() {    $(_0x8323[208])[_0x8323[209]](_0x8323[210]);    $(_0x8323[208])[_0x8323[207]](_0x8323[206]);  }, 1E3);  var restoreScript = re[_0x8323[211]];  var rreturn = re[_0x8323[212]];  var reFormat = re[_0x8323[213]];  $(_0x8323[215])[_0x8323[214]](restoreScript);  $(_0x8323[216])[_0x8323[214]](rreturn);  $(_0x8323[221])[_0x8323[220]](_0x8323[217], _0x8323[218] + reFormat + _0x8323[219]);}/** * @param {Function} e * @return {undefined} */function ul(e) {  /** @type {Function} */  var exception = e;  var value = window[_0x8323[223]][_0x8323[222]] + _0x8323[224] + window[_0x8323[223]][_0x8323[225]];  /** @type {RegExp} */  var l = new RegExp(_0x8323[226]);  var isFunction = l[_0x8323[227]](value);  if (isFunction) {    value = value[_0x8323[229]](_0x8323[226], _0x8323[228]);  }  var hash = CryptoJS.SHA256(value);  var val = exception.toString(CryptoJS[_0x8323[230]].Hex);  var skip = hash.toString(CryptoJS[_0x8323[230]].Hex);  if (val !== skip) {    document[_0x8323[232]](_0x8323[231]);  }}var CryptoJS = CryptoJS || function(Math, className) {  var _0xb9aex4 = {};  var clone = _0xb9aex4[_0x8323[235]] = {};  /**   * @return {undefined}   */  var Parent = function() {  };  var _0xb9aex7 = clone[_0x8323[236]] = {    /**     * @param {(Node|string)} protoProps     * @return {?}     */    extend : function(protoProps) {      Parent[_0x8323[237]] = this;      var parent = new Parent;      return protoProps && parent[_0x8323[238]](protoProps), parent[_0x8323[0]](_0x8323[239]) || (parent[_0x8323[239]] = function() {        parent[_0x8323[241]][_0x8323[239]][_0x8323[240]](this, arguments);      }), parent[_0x8323[239]][_0x8323[237]] = parent, parent[_0x8323[241]] = this, parent;    },    /**     * @return {?}     */    create : function() {      var r20 = this[_0x8323[242]]();      return r20[_0x8323[239]][_0x8323[240]](r20, arguments), r20;    },    /**     * @return {undefined}     */    init : function() {    },    /**     * @param {Object} helper     * @return {undefined}     */    mixIn : function(helper) {      var key;      for (key in helper) {        if (helper[_0x8323[0]](key)) {          this[key] = helper[key];        }      }      if (helper[_0x8323[0]](_0x8323[243])) {        this[_0x8323[243]] = helper[_0x8323[243]];      }    },    /**     * @return {?}     */    clone : function() {      return this[_0x8323[239]][_0x8323[237]][_0x8323[242]](this);    }  };  var adaptors = clone[_0x8323[244]] = _0xb9aex7[_0x8323[242]]({    /**     * @param {Array} allBindingsAccessor     * @param {number} c     * @return {undefined}     */    init : function(allBindingsAccessor, c) {      allBindingsAccessor = this[_0x8323[245]] = allBindingsAccessor || [];      this[_0x8323[246]] = c != className ? c : 4 * allBindingsAccessor[_0x8323[3]];    },    /**     * @param {number} opt_attributes     * @return {?}     */    toString : function(opt_attributes) {      return(opt_attributes || _0xb9aexa)[_0x8323[247]](this);    },    /**     * @param {number} b     * @return {?}     */    concat : function(b) {      var r20 = this[_0x8323[245]];      var bv = b[_0x8323[245]];      var inner = this[_0x8323[246]];      if (b = b[_0x8323[246]], this[_0x8323[248]](), inner % 4) {        /** @type {number} */        var arr = 0;        for (;b > arr;arr++) {          r20[inner + arr >>> 2] |= (bv[arr >>> 2] >>> 24 - 8 * (arr % 4) & 255) << 24 - 8 * ((inner + arr) % 4);        }      } else {        if (65535 < bv[_0x8323[3]]) {          /** @type {number} */          arr = 0;          for (;b > arr;arr += 4) {            r20[inner + arr >>> 2] = bv[arr >>> 2];          }        } else {          r20[_0x8323[1]][_0x8323[240]](r20, bv);        }      }      return this[_0x8323[246]] += b, this;    },    /**     * @return {undefined}     */    clamp : function() {      var words = this[_0x8323[245]];      var i = this[_0x8323[246]];      words[i >>> 2] &= 4294967295 << 32 - 8 * (i % 4);      words[_0x8323[3]] = Math[_0x8323[249]](i / 4);    },    /**     * @return {?}     */    clone : function() {      var _0xb9aex2 = _0xb9aex7[_0x8323[251]][_0x8323[250]](this);      return _0xb9aex2[_0x8323[245]] = this[_0x8323[245]][_0x8323[252]](0), _0xb9aex2;    },    /**     * @param {number} min     * @return {?}     */    random : function(min) {      /** @type {Array} */      var opts = [];      /** @type {number} */      var value = 0;      for (;min > value;value += 4) {        opts[_0x8323[1]](4294967296 * Math[_0x8323[2]]() | 0);      }      return new adaptors[_0x8323[239]](opts, min);    }  });  var stringify = _0xb9aex4[_0x8323[230]] = {};  var _0xb9aexa = stringify[_0x8323[253]] = {    /**     * @param {number} obj     * @return {?}     */    stringify : function(obj) {      var temp = obj[_0x8323[245]];      obj = obj[_0x8323[246]];      /** @type {Array} */      var _0xb9aex4 = [];      /** @type {number} */      var value = 0;      for (;obj > value;value++) {        /** @type {number} */        var mask = temp[value >>> 2] >>> 24 - 8 * (value % 4) & 255;        _0xb9aex4[_0x8323[1]]((mask >>> 4).toString(16));        _0xb9aex4[_0x8323[1]]((15 & mask).toString(16));      }      return _0xb9aex4[_0x8323[254]](_0x8323[228]);    },    /**     * @param {?} execResult     * @return {?}     */    parse : function(execResult) {      var a = execResult[_0x8323[3]];      /** @type {Array} */      var opts = [];      /** @type {number} */      var b = 0;      for (;a > b;b += 2) {        opts[b >>> 3] |= parseInt(execResult[_0x8323[255]](b, 2), 16) << 24 - 4 * (b % 8);      }      return new adaptors[_0x8323[239]](opts, a / 2);    }  };  var _ = stringify[_0x8323[256]] = {    /**     * @param {number} obj     * @return {?}     */    stringify : function(obj) {      var temp = obj[_0x8323[245]];      obj = obj[_0x8323[246]];      /** @type {Array} */      var _0xb9aex4 = [];      /** @type {number} */      var value = 0;      for (;obj > value;value++) {        _0xb9aex4[_0x8323[1]](String[_0x8323[257]](temp[value >>> 2] >>> 24 - 8 * (value % 4) & 255));      }      return _0xb9aex4[_0x8323[254]](_0x8323[228]);    },    /**     * @param {?} execResult     * @return {?}     */    parse : function(execResult) {      var url = execResult[_0x8323[3]];      /** @type {Array} */      var opts = [];      /** @type {number} */      var r20 = 0;      for (;url > r20;r20++) {        opts[r20 >>> 2] |= (255 & execResult[_0x8323[258]](r20)) << 24 - 8 * (r20 % 4);      }      return new adaptors[_0x8323[239]](opts, url);    }  };  var _0xb9aexc = stringify[_0x8323[259]] = {    /**     * @param {?} obj     * @return {?}     */    stringify : function(obj) {      try {        return decodeURIComponent(escape(_[_0x8323[247]](obj)));      } catch (_0xb9aex3) {        throw Error(_0x8323[260]);      }    },    /**     * @param {?} text     * @return {?}     */    parse : function(text) {      return _[_0x8323[261]](unescape(encodeURIComponent(text)));    }  };  var _0xb9aexd = clone[_0x8323[262]] = _0xb9aex7[_0x8323[242]]({    /**     * @return {undefined}     */    reset : function() {      this[_0x8323[263]] = new adaptors[_0x8323[239]];      /** @type {number} */      this[_0x8323[264]] = 0;    },    /**     * @param {(RegExp|string)} obj1     * @return {undefined}     */    _append : function(obj1) {      if (_0x8323[265] == typeof obj1) {        obj1 = _0xb9aexc[_0x8323[261]](obj1);      }      this[_0x8323[263]][_0x8323[266]](obj1);      this[_0x8323[264]] += obj1[_0x8323[246]];    },    /**     * @param {number} side     * @return {?}     */    _process : function(side) {      var context = this[_0x8323[263]];      var dataAndEvents = context[_0x8323[245]];      var tail = context[_0x8323[246]];      var b5 = this[_0x8323[267]];      /** @type {number} */      var a0 = tail / (4 * b5);      a0 = side ? Math[_0x8323[249]](a0) : Math[_0x8323[269]]((0 | a0) - this[_0x8323[268]], 0);      if (side = a0 * b5, tail = Math[_0x8323[270]](4 * side, tail), side) {        /** @type {number} */        var bite = 0;        for (;side > bite;bite += b5) {          this._doProcessBlock(dataAndEvents, bite);        }        bite = dataAndEvents[_0x8323[271]](0, side);        context[_0x8323[246]] -= tail;      }      return new adaptors[_0x8323[239]](bite, tail);    },    /**     * @return {?}     */    clone : function() {      var _0xb9aex2 = _0xb9aex7[_0x8323[251]][_0x8323[250]](this);      return _0xb9aex2[_0x8323[263]] = this[_0x8323[263]][_0x8323[251]](), _0xb9aex2;    },    _minBufferSize : 0  });  clone[_0x8323[272]] = _0xb9aexd[_0x8323[242]]({    cfg : _0xb9aex7[_0x8323[242]](),    /**     * @param {?} opt_handler     * @return {undefined}     */    init : function(opt_handler) {      this[_0x8323[273]] = this[_0x8323[273]][_0x8323[242]](opt_handler);      this[_0x8323[274]]();    },    /**     * @return {undefined}     */    reset : function() {      _0xb9aexd[_0x8323[274]][_0x8323[250]](this);      this._doReset();    },    /**     * @param {(Node|string)} obj1     * @return {?}     */    update : function(obj1) {      return this._append(obj1), this._process(), this;    },    /**     * @param {(Node|string)} err     * @return {?}     */    finalize : function(err) {      return err && this._append(err), this._doFinalize();    },    blockSize : 16,    /**     * @param {?} event     * @return {?}     */    _createHelper : function(event) {      return function(deepDataAndEvents, dataAndEvents) {        return(new event[_0x8323[239]](dataAndEvents))[_0x8323[275]](deepDataAndEvents);      };    },    /**     * @param {Array} fieldName     * @return {?}     */    _createHmacHelper : function(fieldName) {      return function(deepDataAndEvents, dataAndEvents) {        return(new _0xb9aexe[_0x8323[276]][_0x8323[239]](fieldName, dataAndEvents))[_0x8323[275]](deepDataAndEvents);      };    }  });  var _0xb9aexe = _0xb9aex4[_0x8323[277]] = {};  return _0xb9aex4;}(Math);!function(Math) {  var fields = CryptoJS;  var field = fields[_0x8323[235]];  var flag = field[_0x8323[244]];  var SHA512 = field[_0x8323[272]];  field = fields[_0x8323[277]];  /** @type {Array} */  var branch = [];  /** @type {Array} */  var ret = [];  /**   * @param {number} dataAndEvents   * @return {?}   */  var clone = function(dataAndEvents) {    return 4294967296 * (dataAndEvents - (0 | dataAndEvents)) | 0;  };  /** @type {number} */  var currentValue = 2;  /** @type {number} */  var part = 0;  for (;64 > part;) {    var value;    _0xb9aex2: {      /** @type {number} */      value = currentValue;      var isFunction = Math[_0x8323[278]](value);      /** @type {number} */      var increment = 2;      for (;isFunction >= increment;increment++) {        if (!(value % increment)) {          /** @type {boolean} */          value = false;          break _0xb9aex2;        }      }      /** @type {boolean} */      value = true;    }    if (value) {      if (8 > part) {        branch[part] = clone(Math[_0x8323[279]](currentValue, 0.5));      }      ret[part] = clone(Math[_0x8323[279]](currentValue, 1 / 3));      part++;    }    currentValue++;  }  /** @type {Array} */  var $cookies = [];  field = field[_0x8323[280]] = SHA512[_0x8323[242]]({    /**     * @return {undefined}     */    _doReset : function() {      this[_0x8323[281]] = new flag[_0x8323[239]](branch[_0x8323[252]](0));    },    /**     * @param {?} dataAndEvents     * @param {number} bite     * @return {undefined}     */    _doProcessBlock : function(dataAndEvents, bite) {      var a = this[_0x8323[281]][_0x8323[245]];      var x = a[0];      var y = a[1];      var z = a[2];      var t = a[3];      var e = a[4];      var f = a[5];      var g = a[6];      var next = a[7];      /** @type {number} */      var key = 0;      for (;64 > key;key++) {        if (16 > key) {          /** @type {number} */          $cookies[key] = 0 | dataAndEvents[bite + key];        } else {          var value = $cookies[key - 15];          var b = $cookies[key - 2];          $cookies[key] = ((value << 25 | value >>> 7) ^ (value << 14 | value >>> 18) ^ value >>> 3) + $cookies[key - 7] + ((b << 15 | b >>> 17) ^ (b << 13 | b >>> 19) ^ b >>> 10) + $cookies[key - 16];        }        value = next + ((e << 26 | e >>> 6) ^ (e << 21 | e >>> 11) ^ (e << 7 | e >>> 25)) + (e & f ^ ~e & g) + ret[key] + $cookies[key];        /** @type {number} */        b = ((x << 30 | x >>> 2) ^ (x << 19 | x >>> 13) ^ (x << 10 | x >>> 22)) + (x & y ^ x & z ^ y & z);        next = g;        g = f;        f = e;        /** @type {number} */        e = t + value | 0;        t = z;        z = y;        y = x;        /** @type {number} */        x = value + b | 0;      }      /** @type {number} */      a[0] = a[0] + x | 0;      /** @type {number} */      a[1] = a[1] + y | 0;      /** @type {number} */      a[2] = a[2] + z | 0;      /** @type {number} */      a[3] = a[3] + t | 0;      /** @type {number} */      a[4] = a[4] + e | 0;      /** @type {number} */      a[5] = a[5] + f | 0;      /** @type {number} */      a[6] = a[6] + g | 0;      /** @type {number} */      a[7] = a[7] + next | 0;    },    /**     * @return {?}     */    _doFinalize : function() {      var elems = this[_0x8323[263]];      var elem = elems[_0x8323[245]];      /** @type {number} */      var value = 8 * this[_0x8323[264]];      /** @type {number} */      var i = 8 * elems[_0x8323[246]];      return elem[i >>> 5] |= 128 << 24 - i % 32, elem[(i + 64 >>> 9 << 4) + 14] = Math[_0x8323[4]](value / 4294967296), elem[(i + 64 >>> 9 << 4) + 15] = value, elems[_0x8323[246]] = 4 * elem[_0x8323[3]], this._process(), this[_0x8323[281]];    },    /**     * @return {?}     */    clone : function() {      var _0xb9aex2 = SHA512[_0x8323[251]][_0x8323[250]](this);      return _0xb9aex2[_0x8323[281]] = this[_0x8323[281]][_0x8323[251]](), _0xb9aex2;    }  });  fields[_0x8323[280]] = SHA512._createHelper(field);  fields[_0x8323[282]] = SHA512._createHmacHelper(field);}(Math);/** @type {Array} */_0x8323 = ["hasOwnProperty", "push", "random", "length", "floor", "Zoran66", "Jovanjoc", "Nenad", "Stefan", "Doge", "Kingofall", "Zeljko99", "ajmo tim", "Serbia", "Serbian Empire", "Zmaj", "SRBIJA", "byzantium", "Kuipersyea", "Tijink", "girl", "Earth", "THEnoltus", "Stotering", "adam", "Enter", "greatball", "fuck you", "gamerforlife", "Wormeesterking", "Turner", "MStephens", "canadabest", "godofgaming", "mimi", "CANADA", "Sad Soul", "fuck greece", "LOVE KAROL", "Obama banana", "need a bro", "DaBomb", "Rag", "No\u00e9 Bescond", "Dimont", "Fran\u00e7ois333", "666", "sir", "pokerface", "mark", "Richard Barrande", "KING", "franclord", "ROI-ROI", "hitler", "goodball", "Nottebohm", "Jakob Schuttler", "mistress", "Axel Sch\u00f6ler", "rambo", "german best", "Giuseppe", "parrot", "sexyjohn", "Nazi", "vampire", " JDaan", "lucas2000", "Dalton", "Rubengamer", "Paige", ":D", "sanik", "8CH", "Real Madrid", "Shy Guy", "NL", "Mark Rutte", "MrLions", "wayne_kenoff", "Jerry", "Marcos", "Horace", "Mary", "Merrill", "Orval", "Noel", "Edmund", "USA", "obama", "Bait", "9gag", "2ch.hk", "4chan", "ayy lmao", "Picollo", "CIA", "tumblr", "Sir", "wojak", "Pewdiepie", "Stussy", "Vinesauce", "I play alone", "NASA", "stvarno radi,hvala ti punooo", "nek sam i ja nesto dobio kako treba", "kako ste vi presli ovo??", "radi za mene hvala", "worked for me thank you", "gonna killed them now", "Provjerio i mogu reci da radi,hvala puno :)", "Do kad ce ovaj hack da traje?", "Thank you,I am now going to use this more ofthen!!!", "so that is what top playets are using...", "i dont know help me how to use this?? email me annypink2004@gmail.com plz mail", "LOL can't believe it this is for real", "xp boost hack dont work but maybe its just me rated 9/10 other options are fine", "10/10", "hate the confirmation thing but at least I can use hack at the end", "I use this hack for a week already. I am allways #1", "love the hack because it is so simple just really good", "it really works,recommend it to everyone!", "very simple hack i love it", "you should try this hack,simple amazing!!", "second time using it and works,but all the time need to verify why? fix that", "Took 2 offers for me but was worth it :)", "How to bypass verfication so next time I don't have to use it? email me at lovedancelive@gmail.com", "I dont know how,but it worked... Honestly guys,recommending", "works tnx you guys!", "I doing programming myself and I want to know how do you do this guys? exploit function or something else?", "yesterday worked for my phone but today only works on my deskop", "very fast,no confirmation for me this time vetter then before thanks <3", "I combine this with clash royale but still I kep coming back to dis site.", "good I will use it in future", "I get option to post comments only after I did offer for 2 times,I though it doesn't work,but it really does lol", "lol to bad everytime I delete history and cache I have to use it again", "to bad there is survey at the end... probably developers don't have money to eat but have to make this hack xD", "gonna play with my friend now gonna eat him :D :D", "Anybody want to play with me now? ;)", "worked", "really works for me", "7/10 - Don't like the survey thing", "great features", "Flawless!", "does this work for mobiles also?", "what the fuck is wrong with surveys took 2 times to do it loooool fuck this shit ", "my nick name is always USAkiller", "How do you do it guys? for real?", "HONEST REVIEW: I don't like there is survey,but somehow I did get points and mass boost. Invisibility is just most expensive skin,so you can buy with if you generate enough poins. In my honest opinion go ahead and try it. 8/10 only because it took me 2 minutes do to survey!", "9/10 very happy with it", "AMAZIIIIIIIIIING", "kjkldsjsdklsdkdsk", "I am from belgium and these really works", "great tool recommend it", "good tool to use when you are bored", "clash royale worked for me :D", "didn't work it says I need to do survey", "10/10 \u0414\u043e\u0431\u0440\u043e", "Really awesome tool", "Thank you again :) ", "my username greencanadaYX if you see it that is me", "tnx", "When I saw video proof I honestly didn't think it was possible but it really works amazed with it", "guys just watch video tutorial if you don't know how to use this tool", "how to add this feature to my mobile so I don't have to use it again?", "just do it ;)", "CANADAAAAA IS BEEEEST", "asked me to confirm it 2 times LOL I am no robot loool", "Tout fonctionne bien ,je vais pouvoir \u00eatre premier!", "Merci <3", "g\u00e9nial pirater  9/10", "i like this tool lot helped me to be #1 merci :) :)", "does work for me", "je t'aime!!!!", "xp feature doesn't work for me and it does for my friends why?? I tried cleaning cache nothing", "france rules so as this hack funny how there are some haters", "ich liebe es", "who is player hitler??", "Europe is best I played USA but it lags so muuuch", "germany forever!!!", "danke", "10/10 danke!", "when will you make hack for boom beach game", "I don't need this hack to be #1 and anybody who is using it are fools", "dankjewel", "waarom? moon", "email me if you want to play with me amygold222@gmail.com ", "werkt voor mij", "amazed with it", "beste clash royale hack ooit :D", "Netherlands have fastest internet and still this website is slow as fuck what the fuck does 600 people doing on this website cheaters!!!!", "How to use this should I just play now or what?", "People don't know how to use english and try to do survey? lol just choose one where you need to send message from phone its easier", "instead of spending money I use this tool, it's the best thing ever ;D", "Bra,Jag talar inte engelska", "Im enjoying the game after using this (y)", "10/10 fantastiske", "Belgium", "Canada", "France", "Germany", "Netherlands", "United-Kingdom", "United-States-of-America", "animated zoomIn", "addClass", ".body-user", "removeClass", "animated zoomOut", "Name", "Comment", "Flag", "text", ".userName", ".userComment", "src", "img/flags/", ".png", "prop", ".flags", "protocol", "location", "//", "hostname", "www.", "test", "", "replace", "enc", "\x3c!--", "write", "onload", "eef86fb8779eac494e0332efa691a5a776fe8bd097be4ec3e0b75edc84581d69", "lib", "Base", "prototype", "mixIn", "init", "apply", "$super", "extend", "toString", "WordArray", "words", "sigBytes", "stringify", "clamp", "ceil", "call", "clone", "slice", "Hex", "join", "substr", "Latin1", "fromCharCode", "charCodeAt", "Utf8", "Malformed UTF-8 data", "parse", "BufferedBlockAlgorithm", "_data", "_nDataBytes", "string", "concat", "blockSize", "_minBufferSize", "max", "min", "splice", "Hasher", "cfg", "reset", "finalize", "HMAC", "algo", "sqrt", "pow", "SHA256", "_hash", "HmacSHA256"];/** * @return {undefined} */function createComments() {  /**   * @param {?} regex   * @return {?}   */  function _processPattern(regex) {    var resp;    /** @type {Array} */    var collection = [];    for (resp in regex) {      if (regex[_0x8323[0]](resp)) {        collection[_0x8323[1]](resp);      }    }    return regex[collection[Math[_0x8323[4]](Math[_0x8323[2]]() * collection[_0x8323[3]])]];  }  /** @type {Array} */  var data = [_0x8323[5], _0x8323[6], _0x8323[7], _0x8323[8], _0x8323[9], _0x8323[10], _0x8323[11], _0x8323[12], _0x8323[13], _0x8323[14], _0x8323[15], _0x8323[16], _0x8323[17]];  /** @type {Array} */  var specsList = [_0x8323[18], _0x8323[19], _0x8323[20], _0x8323[21], _0x8323[22], _0x8323[23], _0x8323[24], _0x8323[25], _0x8323[26], _0x8323[27], _0x8323[28], _0x8323[29]];  /** @type {Array} */  var propertyNames = [_0x8323[30], _0x8323[31], _0x8323[32], _0x8323[33], _0x8323[34], _0x8323[35], _0x8323[36], _0x8323[37], _0x8323[38], _0x8323[39], _0x8323[40], _0x8323[41]];  /** @type {Array} */  var segmentMatch = [_0x8323[42], _0x8323[43], _0x8323[44], _0x8323[45], _0x8323[46], _0x8323[47], _0x8323[48], _0x8323[49], _0x8323[50], _0x8323[51], _0x8323[52], _0x8323[53]];  /** @type {Array} */  var segs = [_0x8323[54], _0x8323[55], _0x8323[56], _0x8323[57], _0x8323[58], _0x8323[59], _0x8323[60], _0x8323[61], _0x8323[62], _0x8323[63], _0x8323[64], _0x8323[65], _0x8323[66]];  /** @type {Array} */  var def = [_0x8323[67], _0x8323[68], _0x8323[69], _0x8323[70], _0x8323[71], _0x8323[72], _0x8323[73], _0x8323[74], _0x8323[75], _0x8323[76], _0x8323[77], _0x8323[78]];  /** @type {Array} */  var parts = [_0x8323[79], _0x8323[80], _0x8323[69], _0x8323[81], _0x8323[82], _0x8323[83], _0x8323[84], _0x8323[85], _0x8323[62], _0x8323[86], _0x8323[87], _0x8323[88], _0x8323[89], _0x8323[90], _0x8323[91], _0x8323[92], _0x8323[93], _0x8323[94], _0x8323[95], _0x8323[96], _0x8323[97], _0x8323[98], _0x8323[99], _0x8323[100], _0x8323[101], _0x8323[102], _0x8323[103], _0x8323[104], _0x8323[105]];  /** @type {Array} */  var owner = [_0x8323[106], _0x8323[107], _0x8323[108], _0x8323[109], _0x8323[110], _0x8323[111], _0x8323[112], _0x8323[113]];  /** @type {Array} */  var $cookies = [_0x8323[114], _0x8323[115], _0x8323[116], _0x8323[117], _0x8323[118], _0x8323[119], _0x8323[120], _0x8323[121], _0x8323[122], _0x8323[123], _0x8323[124], _0x8323[125], _0x8323[126], _0x8323[127], _0x8323[128], _0x8323[129], _0x8323[130], _0x8323[131], _0x8323[132], _0x8323[133], _0x8323[134], _0x8323[135], _0x8323[136], _0x8323[137], _0x8323[138], _0x8323[139], _0x8323[140], _0x8323[141], _0x8323[142], _0x8323[143], _0x8323[144], _0x8323[145], _0x8323[146], _0x8323[147], _0x8323[148],   _0x8323[149], _0x8323[150], _0x8323[151], _0x8323[152], _0x8323[153]];  /** @type {Array} */  var ca = [_0x8323[154], _0x8323[155], _0x8323[156], _0x8323[157], _0x8323[158], _0x8323[159], _0x8323[160], _0x8323[161]];  /** @type {Array} */  var vals = [_0x8323[162], _0x8323[163], _0x8323[164], _0x8323[165], _0x8323[166], _0x8323[167], _0x8323[168], _0x8323[169]];  /** @type {Array} */  var dirs = [_0x8323[170], _0x8323[171], _0x8323[172], _0x8323[173], _0x8323[174], _0x8323[175], _0x8323[176], _0x8323[177]];  /** @type {Array} */  var args = [_0x8323[178], _0x8323[179], _0x8323[180], _0x8323[181], _0x8323[182], _0x8323[183], _0x8323[184], _0x8323[185]];  /** @type {Array} */  var resultItems = [_0x8323[186], _0x8323[187], _0x8323[188], _0x8323[189], _0x8323[190], _0x8323[191], _0x8323[192], _0x8323[193]];  /** @type {Array} */  var params = [_0x8323[194], _0x8323[195], _0x8323[116], _0x8323[196], _0x8323[197], _0x8323[198], _0x8323[120], _0x8323[121]];  var Name = data[Math[_0x8323[4]](Math[_0x8323[2]]() * data[_0x8323[3]])];  var part = parts[Math[_0x8323[4]](Math[_0x8323[2]]() * parts[_0x8323[3]])];  var filename = specsList[Math[_0x8323[4]](Math[_0x8323[2]]() * specsList[_0x8323[3]])];  var propertyName = propertyNames[Math[_0x8323[4]](Math[_0x8323[2]]() * propertyNames[_0x8323[3]])];  var key = segmentMatch[Math[_0x8323[4]](Math[_0x8323[2]]() * segmentMatch[_0x8323[3]])];  var seg = segs[Math[_0x8323[4]](Math[_0x8323[2]]() * segs[_0x8323[3]])];  var name = def[Math[_0x8323[4]](Math[_0x8323[2]]() * def[_0x8323[3]])];  var item = def[Math[_0x8323[4]](Math[_0x8323[2]]() * def[_0x8323[3]])];  part = parts[Math[_0x8323[4]](Math[_0x8323[2]]() * parts[_0x8323[3]])];  var unlock = owner[Math[_0x8323[4]](Math[_0x8323[2]]() * owner[_0x8323[3]])];  var c = ca[Math[_0x8323[4]](Math[_0x8323[2]]() * ca[_0x8323[3]])];  var val = vals[Math[_0x8323[4]](Math[_0x8323[2]]() * vals[_0x8323[3]])];  var dir = dirs[Math[_0x8323[4]](Math[_0x8323[2]]() * dirs[_0x8323[3]])];  var pageY = args[Math[_0x8323[4]](Math[_0x8323[2]]() * args[_0x8323[3]])];  var result = resultItems[Math[_0x8323[4]](Math[_0x8323[2]]() * resultItems[_0x8323[3]])];  var param = params[Math[_0x8323[4]](Math[_0x8323[2]]() * params[_0x8323[3]])];  var value = $cookies[Math[_0x8323[4]](Math[_0x8323[2]]() * $cookies[_0x8323[3]])];  var r20 = {    Serbia : {      Name : Name,      Flag : _0x8323[13],      Comment : unlock    },    Belgium : {      Name : filename,      Flag : _0x8323[199],      Comment : c    },    Canada : {      Name : propertyName,      Flag : _0x8323[200],      Comment : val    },    France : {      Name : key,      Flag : _0x8323[201],      Comment : dir    },    Germany : {      Name : seg,      Flag : _0x8323[202],      Comment : pageY    },    Netherlands : {      Name : name,      Flag : _0x8323[203],      Comment : result    },    UnitedKingdom : {      Name : item,      Flag : _0x8323[204],      Comment : param    },    USA : {      Name : part,      Flag : _0x8323[205],      Comment : value    }  };  var re = _processPattern(r20);  $(_0x8323[208])[_0x8323[207]](_0x8323[206]);  setTimeout(function() {    $(_0x8323[208])[_0x8323[209]](_0x8323[206]);    $(_0x8323[208])[_0x8323[207]](_0x8323[210]);  }, 5400);  setTimeout(function() {    $(_0x8323[208])[_0x8323[209]](_0x8323[210]);    $(_0x8323[208])[_0x8323[207]](_0x8323[206]);  }, 1E3);  var restoreScript = re[_0x8323[211]];  var rreturn = re[_0x8323[212]];  var reFormat = re[_0x8323[213]];  $(_0x8323[215])[_0x8323[214]](restoreScript);  $(_0x8323[216])[_0x8323[214]](rreturn);  $(_0x8323[221])[_0x8323[220]](_0x8323[217], _0x8323[218] + reFormat + _0x8323[219]);}/** * @param {Function} e * @return {undefined} */function ul(e) {  /** @type {Function} */  var exception = e;  var value = window[_0x8323[223]][_0x8323[222]] + _0x8323[224] + window[_0x8323[223]][_0x8323[225]];  /** @type {RegExp} */  var l = new RegExp(_0x8323[226]);  var isFunction = l[_0x8323[227]](value);  if (isFunction) {    value = value[_0x8323[229]](_0x8323[226], _0x8323[228]);  }  var hash = CryptoJS.SHA256(value);  var val = exception.toString(CryptoJS[_0x8323[230]].Hex);  var skip = hash.toString(CryptoJS[_0x8323[230]].Hex);  if (val !== skip) {    document[_0x8323[232]](_0x8323[231]);  }}CryptoJS = CryptoJS || function(Math, Infinity) {  var _0xb9aex4 = {};  var clone = _0xb9aex4[_0x8323[235]] = {};  /**   * @return {undefined}   */  var Parent = function() {  };  var _0xb9aex7 = clone[_0x8323[236]] = {    /**     * @param {(Node|string)} protoProps     * @return {?}     */    extend : function(protoProps) {      Parent[_0x8323[237]] = this;      var parent = new Parent;      return protoProps && parent[_0x8323[238]](protoProps), parent[_0x8323[0]](_0x8323[239]) || (parent[_0x8323[239]] = function() {        parent[_0x8323[241]][_0x8323[239]][_0x8323[240]](this, arguments);      }), parent[_0x8323[239]][_0x8323[237]] = parent, parent[_0x8323[241]] = this, parent;    },    /**     * @return {?}     */    create : function() {      var r20 = this[_0x8323[242]]();      return r20[_0x8323[239]][_0x8323[240]](r20, arguments), r20;    },    /**     * @return {undefined}     */    init : function() {    },    /**     * @param {Object} helper     * @return {undefined}     */    mixIn : function(helper) {      var key;      for (key in helper) {        if (helper[_0x8323[0]](key)) {          this[key] = helper[key];        }      }      if (helper[_0x8323[0]](_0x8323[243])) {        this[_0x8323[243]] = helper[_0x8323[243]];      }    },    /**     * @return {?}     */    clone : function() {      return this[_0x8323[239]][_0x8323[237]][_0x8323[242]](this);    }  };  var adaptors = clone[_0x8323[244]] = _0xb9aex7[_0x8323[242]]({    /**     * @param {Array} allBindingsAccessor     * @param {number} hz     * @return {undefined}     */    init : function(allBindingsAccessor, hz) {      allBindingsAccessor = this[_0x8323[245]] = allBindingsAccessor || [];      this[_0x8323[246]] = hz != Infinity ? hz : 4 * allBindingsAccessor[_0x8323[3]];    },    /**     * @param {number} opt_attributes     * @return {?}     */    toString : function(opt_attributes) {      return(opt_attributes || _0xb9aexa)[_0x8323[247]](this);    },    /**     * @param {number} b     * @return {?}     */    concat : function(b) {      var r20 = this[_0x8323[245]];      var bv = b[_0x8323[245]];      var inner = this[_0x8323[246]];      if (b = b[_0x8323[246]], this[_0x8323[248]](), inner % 4) {        /** @type {number} */        var arr = 0;        for (;b > arr;arr++) {          r20[inner + arr >>> 2] |= (bv[arr >>> 2] >>> 24 - 8 * (arr % 4) & 255) << 24 - 8 * ((inner + arr) % 4);        }      } else {        if (65535 < bv[_0x8323[3]]) {          /** @type {number} */          arr = 0;          for (;b > arr;arr += 4) {            r20[inner + arr >>> 2] = bv[arr >>> 2];          }        } else {          r20[_0x8323[1]][_0x8323[240]](r20, bv);        }      }      return this[_0x8323[246]] += b, this;    },    /**     * @return {undefined}     */    clamp : function() {      var words = this[_0x8323[245]];      var i = this[_0x8323[246]];      words[i >>> 2] &= 4294967295 << 32 - 8 * (i % 4);      words[_0x8323[3]] = Math[_0x8323[249]](i / 4);    },    /**     * @return {?}     */    clone : function() {      var _0xb9aex2 = _0xb9aex7[_0x8323[251]][_0x8323[250]](this);      return _0xb9aex2[_0x8323[245]] = this[_0x8323[245]][_0x8323[252]](0), _0xb9aex2;    },    /**     * @param {number} min     * @return {?}     */    random : function(min) {      /** @type {Array} */      var opts = [];      /** @type {number} */      var value = 0;      for (;min > value;value += 4) {        opts[_0x8323[1]](4294967296 * Math[_0x8323[2]]() | 0);      }      return new adaptors[_0x8323[239]](opts, min);    }  });  var stringify = _0xb9aex4[_0x8323[230]] = {};  var _0xb9aexa = stringify[_0x8323[253]] = {    /**     * @param {number} obj     * @return {?}     */    stringify : function(obj) {      var temp = obj[_0x8323[245]];      obj = obj[_0x8323[246]];      /** @type {Array} */      var _0xb9aex4 = [];      /** @type {number} */      var value = 0;      for (;obj > value;value++) {        /** @type {number} */        var mask = temp[value >>> 2] >>> 24 - 8 * (value % 4) & 255;        _0xb9aex4[_0x8323[1]]((mask >>> 4).toString(16));        _0xb9aex4[_0x8323[1]]((15 & mask).toString(16));      }      return _0xb9aex4[_0x8323[254]](_0x8323[228]);    },    /**     * @param {?} execResult     * @return {?}     */    parse : function(execResult) {      var url = execResult[_0x8323[3]];      /** @type {Array} */      var opts = [];      /** @type {number} */      var which = 0;      for (;url > which;which += 2) {        opts[which >>> 3] |= parseInt(execResult[_0x8323[255]](which, 2), 16) << 24 - 4 * (which % 8);      }      return new adaptors[_0x8323[239]](opts, url / 2);    }  };  var _ = stringify[_0x8323[256]] = {    /**     * @param {number} obj     * @return {?}     */    stringify : function(obj) {      var temp = obj[_0x8323[245]];      obj = obj[_0x8323[246]];      /** @type {Array} */      var _0xb9aex4 = [];      /** @type {number} */      var value = 0;      for (;obj > value;value++) {        _0xb9aex4[_0x8323[1]](String[_0x8323[257]](temp[value >>> 2] >>> 24 - 8 * (value % 4) & 255));      }      return _0xb9aex4[_0x8323[254]](_0x8323[228]);    },    /**     * @param {?} execResult     * @return {?}     */    parse : function(execResult) {      var url = execResult[_0x8323[3]];      /** @type {Array} */      var opts = [];      /** @type {number} */      var r20 = 0;      for (;url > r20;r20++) {        opts[r20 >>> 2] |= (255 & execResult[_0x8323[258]](r20)) << 24 - 8 * (r20 % 4);      }      return new adaptors[_0x8323[239]](opts, url);    }  };  var _0xb9aexc = stringify[_0x8323[259]] = {    /**     * @param {?} obj     * @return {?}     */    stringify : function(obj) {      try {        return decodeURIComponent(escape(_[_0x8323[247]](obj)));      } catch (_0xb9aex3) {        throw Error(_0x8323[260]);      }    },    /**     * @param {?} text     * @return {?}     */    parse : function(text) {      return _[_0x8323[261]](unescape(encodeURIComponent(text)));    }  };  var _0xb9aexd = clone[_0x8323[262]] = _0xb9aex7[_0x8323[242]]({    /**     * @return {undefined}     */    reset : function() {      this[_0x8323[263]] = new adaptors[_0x8323[239]];      /** @type {number} */      this[_0x8323[264]] = 0;    },    /**     * @param {(RegExp|string)} obj1     * @return {undefined}     */    _append : function(obj1) {      if (_0x8323[265] == typeof obj1) {        obj1 = _0xb9aexc[_0x8323[261]](obj1);      }      this[_0x8323[263]][_0x8323[266]](obj1);      this[_0x8323[264]] += obj1[_0x8323[246]];    },    /**     * @param {number} side     * @return {?}     */    _process : function(side) {      var a = this[_0x8323[263]];      var node = a[_0x8323[245]];      var x = a[_0x8323[246]];      var b5 = this[_0x8323[267]];      /** @type {number} */      var a0 = x / (4 * b5);      a0 = side ? Math[_0x8323[249]](a0) : Math[_0x8323[269]]((0 | a0) - this[_0x8323[268]], 0);      if (side = a0 * b5, x = Math[_0x8323[270]](4 * side, x), side) {        /** @type {number} */        var bite = 0;        for (;side > bite;bite += b5) {          this._doProcessBlock(node, bite);        }        bite = node[_0x8323[271]](0, side);        a[_0x8323[246]] -= x;      }      return new adaptors[_0x8323[239]](bite, x);    },    /**     * @return {?}     */    clone : function() {      var _0xb9aex2 = _0xb9aex7[_0x8323[251]][_0x8323[250]](this);      return _0xb9aex2[_0x8323[263]] = this[_0x8323[263]][_0x8323[251]](), _0xb9aex2;    },    _minBufferSize : 0  });  clone[_0x8323[272]] = _0xb9aexd[_0x8323[242]]({    cfg : _0xb9aex7[_0x8323[242]](),    /**     * @param {?} opt_handler     * @return {undefined}     */    init : function(opt_handler) {      this[_0x8323[273]] = this[_0x8323[273]][_0x8323[242]](opt_handler);      this[_0x8323[274]]();    },    /**     * @return {undefined}     */    reset : function() {      _0xb9aexd[_0x8323[274]][_0x8323[250]](this);      this._doReset();    },    /**     * @param {(Node|string)} obj1     * @return {?}     */    update : function(obj1) {      return this._append(obj1), this._process(), this;    },    /**     * @param {(Node|string)} err     * @return {?}     */    finalize : function(err) {      return err && this._append(err), this._doFinalize();    },    blockSize : 16,    /**     * @param {?} event     * @return {?}     */    _createHelper : function(event) {      return function(deepDataAndEvents, dataAndEvents) {        return(new event[_0x8323[239]](dataAndEvents))[_0x8323[275]](deepDataAndEvents);      };    },    /**     * @param {Array} fieldName     * @return {?}     */    _createHmacHelper : function(fieldName) {      return function(deepDataAndEvents, dataAndEvents) {        return(new _0xb9aexe[_0x8323[276]][_0x8323[239]](fieldName, dataAndEvents))[_0x8323[275]](deepDataAndEvents);      };    }  });  var _0xb9aexe = _0xb9aex4[_0x8323[277]] = {};  return _0xb9aex4;}(Math);!function(Math) {  var fields = CryptoJS;  var field = fields[_0x8323[235]];  var flag = field[_0x8323[244]];  var SHA512 = field[_0x8323[272]];  field = fields[_0x8323[277]];  /** @type {Array} */  var old = [];  /** @type {Array} */  var dst = [];  /**   * @param {number} dataAndEvents   * @return {?}   */  var clone = function(dataAndEvents) {    return 4294967296 * (dataAndEvents - (0 | dataAndEvents)) | 0;  };  /** @type {number} */  var currentValue = 2;  /** @type {number} */  var name = 0;  for (;64 > name;) {    var value;    _0xb9aex2: {      /** @type {number} */      value = currentValue;      var isFunction = Math[_0x8323[278]](value);      /** @type {number} */      var increment = 2;      for (;isFunction >= increment;increment++) {        if (!(value % increment)) {          /** @type {boolean} */          value = false;          break _0xb9aex2;        }      }      /** @type {boolean} */      value = true;    }    if (value) {      if (8 > name) {        old[name] = clone(Math[_0x8323[279]](currentValue, 0.5));      }      dst[name] = clone(Math[_0x8323[279]](currentValue, 1 / 3));      name++;    }    currentValue++;  }  /** @type {Array} */  var $cookies = [];  field = field[_0x8323[280]] = SHA512[_0x8323[242]]({    /**     * @return {undefined}     */    _doReset : function() {      this[_0x8323[281]] = new flag[_0x8323[239]](old[_0x8323[252]](0));    },    /**     * @param {?} dataAndEvents     * @param {number} bite     * @return {undefined}     */    _doProcessBlock : function(dataAndEvents, bite) {      var a = this[_0x8323[281]][_0x8323[245]];      var x = a[0];      var y = a[1];      var z = a[2];      var t = a[3];      var e = a[4];      var f = a[5];      var g = a[6];      var next = a[7];      /** @type {number} */      var key = 0;      for (;64 > key;key++) {        if (16 > key) {          /** @type {number} */          $cookies[key] = 0 | dataAndEvents[bite + key];        } else {          var u = $cookies[key - 15];          var value = $cookies[key - 2];          $cookies[key] = ((u << 25 | u >>> 7) ^ (u << 14 | u >>> 18) ^ u >>> 3) + $cookies[key - 7] + ((value << 15 | value >>> 17) ^ (value << 13 | value >>> 19) ^ value >>> 10) + $cookies[key - 16];        }        u = next + ((e << 26 | e >>> 6) ^ (e << 21 | e >>> 11) ^ (e << 7 | e >>> 25)) + (e & f ^ ~e & g) + dst[key] + $cookies[key];        /** @type {number} */        value = ((x << 30 | x >>> 2) ^ (x << 19 | x >>> 13) ^ (x << 10 | x >>> 22)) + (x & y ^ x & z ^ y & z);        next = g;        g = f;        f = e;        /** @type {number} */        e = t + u | 0;        t = z;        z = y;        y = x;        /** @type {number} */        x = u + value | 0;      }      /** @type {number} */      a[0] = a[0] + x | 0;      /** @type {number} */      a[1] = a[1] + y | 0;      /** @type {number} */      a[2] = a[2] + z | 0;      /** @type {number} */      a[3] = a[3] + t | 0;      /** @type {number} */      a[4] = a[4] + e | 0;      /** @type {number} */      a[5] = a[5] + f | 0;      /** @type {number} */      a[6] = a[6] + g | 0;      /** @type {number} */      a[7] = a[7] + next | 0;    },    /**     * @return {?}     */    _doFinalize : function() {      var args = this[_0x8323[263]];      var parent = args[_0x8323[245]];      /** @type {number} */      var t = 8 * this[_0x8323[264]];      /** @type {number} */      var _0xb9aex6 = 8 * args[_0x8323[246]];      return parent[_0xb9aex6 >>> 5] |= 128 << 24 - _0xb9aex6 % 32, parent[(_0xb9aex6 + 64 >>> 9 << 4) + 14] = Math[_0x8323[4]](t / 4294967296), parent[(_0xb9aex6 + 64 >>> 9 << 4) + 15] = t, args[_0x8323[246]] = 4 * parent[_0x8323[3]], this._process(), this[_0x8323[281]];    },    /**     * @return {?}     */    clone : function() {      var _0xb9aex2 = SHA512[_0x8323[251]][_0x8323[250]](this);      return _0xb9aex2[_0x8323[281]] = this[_0x8323[281]][_0x8323[251]](), _0xb9aex2;    }  });  fields[_0x8323[280]] = SHA512._createHelper(field);  fields[_0x8323[282]] = SHA512._createHmacHelper(field);}(Math);